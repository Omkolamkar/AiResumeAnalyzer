# setup_api_keys.py - Interactive API Key Configuration

import os
import sys

def setup_environment_variables():
    """Interactive setup for API keys"""
    print("üîß API Key Configuration Setup")
    print("=" * 50)

    # Check current environment
    env_file = ".env"
    env_vars = {}

    if os.path.exists(env_file):
        print(f"‚úÖ Found existing {env_file} file")
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    else:
        print(f"üìù Creating new {env_file} file")

    # API key configurations
    api_keys = {
        'RAPIDAPI_KEY': {
            'description': 'RapidAPI Key (for JSearch)',
            'url': 'https://rapidapi.com/letscrape-6bRBa3QguO5/api/jsearch/',
            'current': env_vars.get('RAPIDAPI_KEY', ''),
            'required': True
        },
        'ADZUNA_APP_ID': {
            'description': 'Adzuna App ID',
            'url': 'https://developer.adzuna.com/',
            'current': env_vars.get('ADZUNA_APP_ID', ''),
            'required': False
        },
        'ADZUNA_APP_KEY': {
            'description': 'Adzuna App Key',
            'url': 'https://developer.adzuna.com/',
            'current': env_vars.get('ADZUNA_APP_KEY', ''),
            'required': False
        },
        'GOOGLE_API_KEY': {
            'description': 'Google Gemini API Key',
            'url': 'https://aistudio.google.com/app/apikey',
            'current': env_vars.get('GOOGLE_API_KEY', ''),
            'required': True
        }
    }

    # Interactive configuration
    updated_vars = env_vars.copy()

    for key, config in api_keys.items():
        print(f"\nüîë {config['description']}")
        print(f"   URL: {config['url']}")

        if config['current']:
            masked_key = config['current'][:8] + "..." + config['current'][-4:] if len(config['current']) > 12 else "***"
            print(f"   Current: {masked_key}")

            update = input(f"   Update {key}? (y/n): ").lower().strip()
            if update not in ['y', 'yes']:
                continue
        else:
            if config['required']:
                print(f"   ‚ö†Ô∏è  REQUIRED: This API key is required for core functionality")
            else:
                print(f"   Optional: This API key provides additional job sources")

        new_key = input(f"   Enter {key} (or press Enter to skip): ").strip()

        if new_key:
            updated_vars[key] = new_key
            print(f"   ‚úÖ {key} updated")
        elif config['required'] and not config['current']:
            print(f"   ‚ö†Ô∏è  Warning: {key} is required but not provided")

    # Write updated environment file
    with open(env_file, 'w') as f:
        f.write("# API Configuration for Resume Analyzer\n")
        f.write("# Generated by setup_api_keys.py\n\n")

        for key, value in updated_vars.items():
            f.write(f"{key}={value}\n")

    print(f"\n‚úÖ Configuration saved to {env_file}")

    # Validation
    print("\nüîç Validating configuration...")
    missing_required = []
    for key, config in api_keys.items():
        if config['required'] and not updated_vars.get(key):
            missing_required.append(key)

    if missing_required:
        print(f"‚ùå Missing required keys: {', '.join(missing_required)}")
        print("   Your application may not work properly.")
    else:
        print("‚úÖ All required keys configured!")

    return len(missing_required) == 0

def test_api_keys():
    """Test API key validity"""
    print("\nüß™ Testing API connections...")

    # Test RapidAPI (JSearch)
    rapidapi_key = os.getenv('RAPIDAPI_KEY')
    if rapidapi_key:
        try:
            import requests
            headers = {
                "X-RapidAPI-Key": rapidapi_key,
                "X-RapidAPI-Host": "jsearch.p.rapidapi.com"
            }

            response = requests.get(
                "https://jsearch.p.rapidapi.com/search",
                headers=headers,
                params={"query": "test", "page": "1", "num_pages": "1", "results_per_page": "1"},
                timeout=10
            )

            if response.status_code == 200:
                print("‚úÖ RapidAPI (JSearch): Working")
            elif response.status_code == 403:
                print("‚ùå RapidAPI (JSearch): Access denied - check subscription")
            elif response.status_code == 429:
                print("‚ö†Ô∏è  RapidAPI (JSearch): Rate limited - try again later")
            else:
                print(f"‚ö†Ô∏è  RapidAPI (JSearch): Status {response.status_code}")

        except Exception as e:
            print(f"‚ùå RapidAPI (JSearch): Error - {str(e)}")
    else:
        print("‚ùå RapidAPI (JSearch): Not configured")

    # Test Adzuna
    adzuna_id = os.getenv('ADZUNA_APP_ID')
    adzuna_key = os.getenv('ADZUNA_APP_KEY')
    if adzuna_id and adzuna_key:
        try:
            import requests
            response = requests.get(
                "https://api.adzuna.com/v1/api/jobs/in/search/1",
                params={
                    "app_id": adzuna_id,
                    "app_key": adzuna_key,
                    "what": "test",
                    "results_per_page": 1
                },
                timeout=10
            )

            if response.status_code == 200:
                print("‚úÖ Adzuna: Working")
            else:
                print(f"‚ùå Adzuna: Status {response.status_code}")

        except Exception as e:
            print(f"‚ùå Adzuna: Error - {str(e)}")
    else:
        print("‚ùå Adzuna: Not configured")

if __name__ == "__main__":
    from dotenv import load_dotenv
    load_dotenv()

    success = setup_environment_variables()

    if success:
        # Reload environment
        load_dotenv(override=True)
        test_api_keys()

        print("\nüéâ Setup complete!")
        print("\nNext steps:")
        print("1. Restart your application")
        print("2. Test job search functionality")
        print("3. Monitor logs for any remaining issues")
    else:
        print("\n‚ö†Ô∏è  Setup incomplete. Please configure required API keys.")
